USE [SQL_SESSION];

------------------CREATING TABLE--------------------
CREATE TABLE CUSTOMERS(
ID INT NOT NULL,
NAME VARCHAR(20) NOT NULL,
AGE INT NOT NULL,
SALARY DECIMAL(18,2),
PRIMARY KEY (ID)
);

--------Inserting data--------------------
INSERT INTO CUSTOMERS (ID, NAME, AGE, SALARY) VALUES (1, 'SRAVANTHI', 22, 2000.00);
INSERT INTO CUSTOMERS VALUES (2, 'HEMA', 23, 3000.00),
(3, 'TEJA',20, 4000.00),(4, 'BHAVYA',10, 5000.00),
(5, 'HONEY',13, 6000.00),(6, 'KARTHIK',11, 7000.00);

-----------------VIEW DATA IN THE TABLE---------------
SELECT * FROM CUSTOMERS;

----------------------------DUPLICATE THE TABLE-------------------------

CREATE TABLE STUDENT(
NAME VARCHAR(20) NOT NULL,
JOININGDATE DATE
);

INSERT INTO STUDENT VALUES
('SRAVANTHI','2019/03/03'),
('HEMA', '2020/09/08'),
('TEJA','2012/06/09');

SELECT * FROM STUDENT;

SELECT * INTO STUDENT_BACKUP FROM STUDENT;

SELECT * FROM STUDENT_BACKUP;

---------------------------CREATE TABLE FROM ANY COLUMNS OF OTHER TABLES-----------------------
CREATE TABLE ORDERS(
ID INT NOT NULL,
DATE VARCHAR(20) NOT NULL,
CUSTOMER_ID INT NOT NULL,
AMOUNT DECIMAL(18,2)
);

INSERT INTO ORDERS VALUES
(102, '2020-02-03 00:12:90', 1, 2000.00),
(103, '2019-02-03 01:12:90', 2, 20000.00),
(104, '2021-02-03 02:12:90', 3, 4000.00),
(105, '2022-02-03 03:12:90', 4, 6000.00),
(106, '2024-02-03 04:12:90', 5, 8000.00);

SELECT * FROM ORDERS;

SELECT ORDERS.CUSTOMER_ID, CUSTOMERS.NAME, ORDERS.AMOUNT
INTO CUSTOMER_ORDERS
FROM CUSTOMERS
LEFT JOIN ORDERS
ON CUSTOMER_ID = ORDERS.CUSTOMER_ID;

SELECT * FROM CUSTOMER_ORDERS;

-------------------ALTER AND DROP QUERIES---------------
SELECT * FROM CUSTOMERS;

ALTER TABLE CUSTOMERS
ADD SEX CHAR(1);

ALTER TABLE CUSTOMERS
DROP COLUMN SEX;

----------------CHANGE NAME OF A COLUMN------------------
EXEC sp_rename 'CUSTOMERS.NAME', 'FULL_NAME';

EXEC sp_rename 'CUSTOMERS.FULL_NAME', 'NAME';


SELECT * FROM CUSTOMERS;

-------------------------CHANGE DATATYPE OF COLUMN---------------

ALTER TABLE ORDERS
ALTER COLUMN DATE VARCHAR(20);

SELECT * FROM ORDERS;

-------------------------UPDATE AND DELETE QUERIES---------------

SELECT * FROM ORDERS;

UPDATE ORDERS
SET AMOUNT = AMOUNT + 1000.00;

UPDATE ORDERS
SET AMOUNT = 4000.00, CUSTOMER_ID = 6
WHERE ID = 106;

DELETE FROM ORDERS
WHERE ID = 106;

--------------------SORT QUERIES---------------

SELECT * FROM CUSTOMERS
ORDER BY NAME;

SELECT * FROM CUSTOMERS
ORDER BY ID DESC;
---------------------OPERATORS AND CLAUSES----------------

----------------WHERE CLAUSE---------
SELECT ID, NAME, SALARY
FROM CUSTOMERS
WHERE SALARY >2000;

UPDATE CUSTOMERS
SET SALARY = SALARY + 1000.00
WHERE NAME = 'BHAVYA';

SELECT * FROM CUSTOMERS;

SELECT * FROM CUSTOMERS
WHERE NAME IN('TEJA','KARTHIK', 'HONEY');

SELECT * FROM CUSTOMERS
WHERE ID NOT IN(1,2,3);

SELECT * FROM CUSTOMERS
WHERE NAME LIKE 'B___%';

SELECT * FROM CUSTOMERS
WHERE (AGE = 20 OR SALARY >2000)
AND (NAME = 'HONEY' OR NAME = 'KARTHIK');

-------------------------TOP CLAUSE------------------------
SELECT * FROM CUSTOMERS;

SELECT TOP 4*
FROM CUSTOMERS;

SELECT TOP 4*
FROM CUSTOMERS
ORDER BY SALARY DESC;

SELECT TOP 40 PERCENT *
FROM CUSTOMERS
ORDER BY SALARY;

SELECT TOP 2*
FROM CUSTOMERS
WHERE NAME LIKE 'K%';

SELECT TOP 2 ID, NAME
FROM CUSTOMERS;

-----------------------DISTINCT CLAUSE-------------------

SELECT DISTINCT SALARY
FROM CUSTOMERS
ORDER BY SALARY;


SELECT DISTINCT AGE, SALARY
FROM CUSTOMERS
ORDER BY AGE;

--------------------HERE UNIQUE_AGE IS THE COLUMN NAME COMES IN OUT PUT (NOT THE COLUMN NAME OF TABLE)-----------------

SELECT COUNT(DISTINCT AGE) AS UNIQUE_AGE
FROM CUSTOMERS;


SELECT DISTINCT AGE AS UNIQUE_AGE
FROM CUSTOMERS;

--------------------Group By-------------------------------
SELECT AGE, COUNT(NAME)
FROM CUSTOMERS
GROUP BY AGE;

SELECT AGE, MAX(SALARY) AS MAX_SALARY
FROM CUSTOMERS
GROUP BY AGE;


SELECT AGE, AVG(SALARY) AS AVG_SALARY
FROM CUSTOMERS
GROUP BY AGE;

SELECT NAME, AGE, SUM(SALARY) AS TOTAL_SALARY
FROM CUSTOMERS
GROUP BY NAME, AGE;

SELECT AGE,MIN(SALARY) AS MIN_SALARY
FROM CUSTOMERS
GROUP BY AGE
ORDER BY MIN_SALARY DESC;

SELECT * FROM CUSTOMERS;

INSERT INTO CUSTOMERS VALUES 
(7, 'CHITTI', 22, 20000),
(8, 'BUDDU', 10, 60000);

-------------------------HAVING CLAUSE-(ALTERNATIVE FOR WHERE IN CASE OF AGGREGATIVE FUNCTIONS LIKE MATHEMATICAL FUNCTIONS)--------------
SELECT NAME, AGE, MIN(SALARY) AS MIN_SUM
FROM CUSTOMERS
GROUP BY NAME,AGE
HAVING AGE>20;

SELECT NAME, AGE, SUM(SALARY) AS TOTAL_SALARY
FROM CUSTOMERS
GROUP BY NAME, AGE
HAVING SUM(SALARY) >= 5000
ORDER BY TOTAL_SALARY DESC;

SELECT AGE, COUNT(AGE)
FROM CUSTOMERS
GROUP BY AGE
HAVING COUNT(AGE) >= 2;

----------------------------------BOOLEAN------------------------
CREATE TABLE CARS(
ID INT NOT NULL,
NAME VARCHAR(150),
ISRED BIT
);

DROP TABLE CARS;

CREATE TABLE CARS(
MANUFACTURE_NAME VARCHAR(150) NOT NULL,
TYPE VARCHAR(15),
TRANSMISSION VARCHAR(20),
COLOR CHAR(10),
IS_RED BIT
);


INSERT INTO CARS VALUES
('TOYOTA', 'SUV', 'AUTOMATIC','RED', 'TRUE'),
('HONDA', 'hATCHBACK', 'MANUAL','BLUE', 'FALSE'),
('FORD', 'MINIVAN', 'MANUAL','RED', 'TRUE'),
('MERCEDEDS', 'SEDEN', 'AUTOMATIC','GREY', 'FALSE');

SELECT * FROM CARS;

SELECT * FROM CARS
WHERE IS_RED = 'TRUE';

------------------------------CASE STATEMENT------------------
SELECT NAME, AGE ,
CASE
WHEN AGE>30 THEN 'GEN X'
WHEN AGE>25 THEN 'GEN Y'
WHEN AGE>22 THEN 'GEN Z'
ELSE 'GEN ALPHA'
END AS GENERATION
FROM CUSTOMERS;
 
SELECT * ,
CASE WHEN SALARY >10000 THEN (SALARY+SALARY * 25/100)
END AS INCREMENT FROM CUSTOMERS;
 
SELECT * FROM CUSTOMERS
ORDER BY 
(CASE 
   WHEN NAME LIKE 'k%' THEN NAME
   ELSE ADDRESS
     END);
 
SELECT 
	CASE 
		WHEN SALARY <=4000 THEN 'LOWEST PAID'
		WHEN SALARY >4000 AND SALARY <=6500 THEN 'AVERAGE PAID'
			ELSE 'HIGHEST PAID'
				END AS SALARY_STATUS,
			SUM(SALARY) AS TOTAL
			FROM CUSTOMERS
			GROUP BY 
			CASE
				WHEN SALARY <=4000 THEN 'LOWEST PAID'
				WHEN SALARY >4000 AND SALARY <=6500 THEN 'AVERAGE PAID'
					ELSE 'HIGHEST PAID'
					END;
 
SELECT NAME, ADDRESS, 
	CASE
		WHEN AGE < 25 THEN 'INTERN'
		WHEN AGE >=25 AND AGE <=27 THEN 'ASSOCIATE ENGINEER'
		ELSE 'SENIOR DEVELOPER'
		END AS DESIGNATION
			FROM CUSTOMERS
				WHERE SALARY >=2000;
 
UPDATE CUSTOMERS
SET SALARY = 
CASE AGE 
WHEN 25 THEN 17000
WHEN 32 THEN 25000
ELSE 12000
END;
 
SELECT * FROM CUSTOMERS;
 
SELECT NAME, AGE,
CASE
	WHEN AGE <25 THEN 'NULL'
	ELSE NAME 
	END AS CHECK_NAME
	FROM CUSTOMERS;
 
SELECT ADDRESS FROM CUSTOMERS;

ALTER TABLE CUSTOMERS
ADD ADDRESS CHAR(15);

SELECT * FROM CUSTOMERS;

UPDATE CUSTOMERS
SET SALARY = 20000;

UPDATE CUSTOMERS
SET ADDRESS = 'KOLKATA';


USE SQL_SESSION;

---------------------------------BETWEEN OPERATOR--------------------------------

SELECT * FROM CUSTOMERS
WHERE AGE BETWEEN 15 AND 25;

SELECT * FROM CUSTOMERS
WHERE NAME BETWEEN 'A' AND 'K';

UPDATE CUSTOMERS
SET SALARY = 10000
WHERE AGE BETWEEN 15 AND 20;


UPDATE CUSTOMERS
SET SALARY = 15000
WHERE AGE BETWEEN 20 AND 22;


UPDATE CUSTOMERS
SET SALARY = 10000, ADDRESS = 'HYDERABAD'
WHERE AGE BETWEEN 10 AND 15;

SELECT * FROM CUSTOMERS
WHERE SALARY NOT BETWEEN 12000 AND 16000;

----------------------------------UNION OPERATOR---------------------
SELECT * FROM ORDERS;

SELECT SALARY FROM CUSTOMERS
UNION SELECT AMOUNT FROM ORDERS;

SELECT CS.ID, CS.NAME, OD.AMOUNT, OD.DATE
FROM CUSTOMERS CS
LEFT JOIN ORDERS OD
ON CS.ID=OD.CUSTOMER_ID
UNION
SELECT CS.ID, CS.NAME, OD.AMOUNT, OD.DATE
FROM CUSTOMERS CS
RIGHT JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID;

------------------------joints-----------------------
SELECT CS.ID, CS.NAME, OD.AMOUNT
FROM CUSTOMERS CS
JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID;

-----------------INNER JOIN : DEFAULT----------------
SELECT CS.ID,CS.NAME,OD.DATE, OD.AMOUNT
FROM CUSTOMERS CS
INNER JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID;

---------------------EMPLOYEE TABLE----------
CREATE TABLE EMPLOYEE(
EID INT NOT NULL,
EMPLOYEE_NAME VARCHAR(20) NOT NULL,
SALES_MADE DECIMAL(20)
);

INSERT INTO EMPLOYEE VALUES
(102, 'SARIKA', 4500),
(103, 'ALEKHYA',3909),
(104, 'HARIKA',4325),
(105, 'VIVEK',2345);

SELECT * FROM EMPLOYEE;

SELECT OD.ID, OD.DATE,OD.AMOUNT,ES.EMPLOYEE_NAME
FROM CUSTOMERS CS
INNER JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID
INNER JOIN EMPLOYEE ES
ON OD.ID = ES.EID;

SELECT OD.ID, OD.DATE, OD.AMOUNT, CS.NAME
FROM CUSTOMERS CS
INNER JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID
WHERE OD.AMOUNT >= 7000;

-------------------------	LEFT JOIN  ---TAKES ALL FROM LEFT TABLE-------------------
SELECT CS.ID, CS.NAME, OD.AMOUNT, OD.DATE
FROM CUSTOMERS CS
LEFT JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID;

SELECT CS.ID, CS.NAME, OD.DATE, ES.EMPLOYEE_NAME
FROM CUSTOMERS CS
LEFT JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID
LEFT JOIN EMPLOYEE ES
ON OD.ID = ES.EID;

SELECT  CS.ID, CS.NAME, OD.DATE, OD.AMOUNT
FROM CUSTOMERS CS
LEFT JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID
WHERE OD.AMOUNT < 8000;

--------------------------RIGHT JOIN-----------------
SELECT CS.ID, CS.NAME, OD.AMOUNT, OD.DATE
FROM CUSTOMERS CS
RIGHT JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID;


SELECT CS.ID, CS.NAME, OD.DATE, ES.EMPLOYEE_NAME
FROM CUSTOMERS CS
RIGHT JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID
RIGHT JOIN EMPLOYEE ES
ON OD.ID = ES.EID;

SELECT  CS.ID, CS.NAME, OD.DATE, OD.AMOUNT
FROM CUSTOMERS CS
RIGHT JOIN ORDERS OD
ON CS.ID = OD.CUSTOMER_ID
WHERE OD.AMOUNT < 8000;

---------------------CROSS JOIN------------------

SELECT CS.ID, CS.NAME, OD.AMOUNT, OD.DATE
FROM CUSTOMERS CS
CROSS JOIN ORDERS OD;

CREATE TABLE ORDERS_RANGE(
SNO INT NOT NULL,
ORDER_RANGE VARCHAR(20) NOT NULL
);

INSERT INTO ORDERS_RANGE VALUES
(1, '1-100'),
(2, '100-200'),
(3, '200-300');

SELECT * FROM ORDERS_RANGE;

SELECT CS.ID, CS.NAME, OD.AMOUNT, OD.DATE, ORDER_RANGE
FROM CUSTOMERS CS
CROSS JOIN ORDERS OD
CROSS JOIN ORDERS_RANGE;

--------------SELF-JOIN---------------------

SELECT A.ID, B.NAME AS EARNS_HIGHER, A.NAME AS EARNS_LESSER,
A.SALARY AS LOWER_SALARY
FROM CUSTOMERS A, CUSTOMERS B
WHERE A.SALARY < B.SALARY;

